// <auto-generated />
using System;
using MarysToyStore.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MarysToyStore.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210315151805_AddIsArchived")]
    partial class AddIsArchived
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("MarysToyStore.DataAccess.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsArchived = false,
                            Name = "Mattel"
                        },
                        new
                        {
                            Id = 2,
                            IsArchived = false,
                            Name = "Fisher Price"
                        },
                        new
                        {
                            Id = 3,
                            IsArchived = false,
                            Name = "Hot Wheels"
                        });
                });

            modelBuilder.Entity("MarysToyStore.DataAccess.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BrandId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 3,
                            Description = "A toy car that goes really fast.",
                            ImagePath = "/bluecar.jpg",
                            IsArchived = false,
                            Name = "Car",
                            Price = 3.99m
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            Description = "Toy ducks that float.",
                            ImagePath = "/ducks.jpg",
                            IsArchived = false,
                            Name = "Ducks",
                            Price = 10.99m
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            Description = "A toy to build your ideas.",
                            ImagePath = "/legos.jpg",
                            IsArchived = false,
                            Name = "Legos",
                            Price = 25.99m
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            Description = "An advanced toy that will make anybody happy.",
                            ImagePath = "/robot.jpg",
                            IsArchived = false,
                            Name = "Robot",
                            Price = 15.99m
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 2,
                            Description = "A soft bear that is comforting to touch.",
                            ImagePath = "/teddy.jpg",
                            IsArchived = false,
                            Name = "Teddy",
                            Price = 29.99m
                        });
                });

            modelBuilder.Entity("MarysToyStore.DataAccess.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsArchived = false,
                            Name = "Sporting Goods"
                        },
                        new
                        {
                            Id = 2,
                            IsArchived = false,
                            Name = "Home"
                        },
                        new
                        {
                            Id = 3,
                            IsArchived = false,
                            Name = "Office"
                        },
                        new
                        {
                            Id = 4,
                            IsArchived = false,
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 5,
                            IsArchived = false,
                            Name = "Electronics"
                        });
                });

            modelBuilder.Entity("MarysToyStore.DataAccess.Models.ProductCategoryProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "ProductCategoryId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductCategoryProducts");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductCategoryId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            ProductCategoryId = 5
                        });
                });

            modelBuilder.Entity("MarysToyStore.DataAccess.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailAddress = "admin@admin.admin",
                            FirstName = "admin's First name",
                            IsAdmin = true,
                            LastName = "admin's Last Name",
                            PasswordHash = "AQAAAAEAACcQAAAAECRGWYJZrwdhOR60KJ721NpQDZILO8TKmaYAGZEiy2ZKr+8sAKIlfMrd3PHF202xZw=="
                        });
                });

            modelBuilder.Entity("MarysToyStore.DataAccess.Models.Product", b =>
                {
                    b.HasOne("MarysToyStore.DataAccess.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarysToyStore.DataAccess.Models.ProductCategoryProduct", b =>
                {
                    b.HasOne("MarysToyStore.DataAccess.Models.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryProducts")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarysToyStore.DataAccess.Models.Product", "Product")
                        .WithMany("ProductCategoryProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
